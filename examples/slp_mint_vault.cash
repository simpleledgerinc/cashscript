// Copyright (C) 2020 Simple Ledger, Inc.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
pragma cashscript 0.5.3;

// ****************************************************************************************************
// SlpMintVault 0.1
// ****************************************************************************************************
// 
// Contract Methods include:
//      - mint(bytes8 slpAmt, bytes changeOutput, pubkey pk, sig s)
//      - lockUnlock(bytes newLockState, bytes changeOutput, pubkey pk, sig s)
//      - transfer(bytes newOwnerScript, bytes changeOutput, pubkey pk, sig s)
//
// Constructor Inputs include:
//      - tokenId:
//      - pkh: the intended owner and recipient for any coins sent
//      - isLocked:
//
// ****************************************************************************************************
//
contract SlpMintVault(bytes32 tokenId, bytes20 pkh, bytes isLocked) {

    // ******************************************************************
    // Mint
    // ******************************************************************
    //
    // Mint more tokens
    //
    // Parameters:
    //      - outputs    : transaction hashOutputs preimage
    //      - pubkey     : the pubkey of the pkh for this vault
    //      - sig        : a signature from above pubkey for this txn
    //
    // ******************************************************************
    //
    function mint(bytes8 slpAmt, bytes changeOutput, pubkey pk, sig s) {

        // check contract state
        require(isLocked == 0x01);

        // slp mint message 
        bytes slpMsg = 0x396a04534c50000101044d494e5420 + tokenId + 0x08 + slpAmt;
        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(tx.bytecode));
        require(tx.hashOutputs == hash256(0x0000000000000000 + slpMsg + batonOut +  changeOutput));

        // check for the p2pkh owner
        require(hash160(pk) == pkh);
        require(checkSig(s, pk));
    }

    // ******************************************************************
    // LockUnlock 
    // ******************************************************************
    //
    // Lock or unlock the ability to exit "exit()"
    // 
    // Parameters:
    //      - newLockState  : new lock state (enable/disable) ability to
    //                        use "mint()" or "exit()"
    //      - changeOutput  : transaction hashOutputs preimage
    //      - pubkey     : the pubkey of the pkh for this vault
    //      - s             : a signature from above pubkey needed for
    //                        spending this coin
    // ******************************************************************
    //
    function lockUnlock(bytes newLockState, bytes changeOutput, pubkey pk, sig s) {

        // update byte code to frozen or unfrozen
        if (newLockState == 0x01) {
            require(isLocked == 0x00);
        } else {
            require(isLocked == 0x01);
        }

        // slp mint message 
        bytes slpMsg = 0x396a04534c50000101044d494e5420 + tokenId + 0x08 + 0x0000000000000000;
        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(0x01 + newLockState + tx.bytecode.split(2)[1]));
        require(tx.hashOutputs == hash256(0x0000000000000000 + slpMsg + batonOut + changeOutput));

        // check for the p2pkh owner
        require(hash160(pk) == pkh);
        require(checkSig(s, pk));
    }

    // ******************************************************************
    // Transfer 
    // ******************************************************************
    //
    // Transfer the Mint Vault to a new address.
    // 
    // Parameters:
    //      - newOwnerScript : transaction hashOutputs preimage
    //      - changeOutput   : transaction hashOutputs preimage
    //      - pubkey         : the pubkey of the pkh for this vault
    //      - s              : a signature from above pubkey needed for
    //                         spending this coin
    // ******************************************************************
    //
    function Transfer(pubkey newPk, bytes changeOutput, pubkey pk, sig s) {

        // check contract state
        require(isLocked == 0x00);

        // check pubkey length is correct
        require(newPk.length == 33);

        // slp mint message 
        bytes slpMsg = 0x396a04534c50000101044d494e5420 + tokenId + 0x08 + 0x0000000000000000;
        bytes batonOut = new OutputP2SH(0x2202000000000000, hash160(0x0100 + 0x14 + hash160(newPk) + tx.bytecode.split(23)[1]));
        require(tx.hashOutputs == hash256(0x0000000000000000 + slpMsg + 0x2202000000000000 + batonOut + changeOutput));

        // check for the p2pkh owner
        require(hash160(pk) == pkh);
        require(checkSig(s, pk));
    }

}