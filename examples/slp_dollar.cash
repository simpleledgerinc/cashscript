pragma cashscript 0.5.3;

// ****************************************************************************************************
// SlpDollar v0.1
// ****************************************************************************************************
// 
// This contract demonstrates how to implement a digital dollar using the Simple Ledger Protocol (SLP).
// Extremely low transaction fees and fast confirmation times make SLP an effective and efficient
// platform for building a Central Bank Digital Currency (CBDC).
//
// CBDC issuers are provided the ability to freeze or unfreeze a user's coins, at will, using the 
// "freeze" contract method.
//
// Send transactions are required to have two (2) digital dollar outputs, one payment receiver, and
// one change back to the sender. The payment receiver's p2pkh address will receive a small BCH
// amount (i.e., "payNotifier") to serve as a notification about the newly received dollar.
//
// Contract Methods include:
//
//      - send(): allows the digital dollar owner to spend,
//      - freeze(): allows CBDC issuer to freeze or unfreeze a coin
//
// Constructor Inputs include:
//
//      - isFrozen: a state variable indicating the freeze status for a coin (1 byte)
//      - slpAmt: a state variable holding the slp amount (8 bytes)
//      - pkh: a 20-byte state variable representing the current coin owner's public key hash
//      - issuerPk: the CBDC issuer's public key used for freeze/unfreeze (research tree signatures)
//      - tokenId: the token id for the issuer's token
//
// ****************************************************************************************************
//
contract SlpDollar(bytes isFrozen, bytes8 slpAmt, bytes20 pkh, pubkey issuerPk, bytes32 tokenId) {

    // *************************************************************
    // Send
    // *************************************************************
    //
    // Send coin
    //
    //  - payAmt: Payment digital dollar amount for txn output 1
    //  - payPk: Payment public key for txn output 1
    //  - changeAmt: Change digital dollar amount sent back to pkh
    //  - pk: the pubkey of the pkh for this coin
    //  - s: a signature from above pubkey for this coin
    //
    // *************************************************************
    //
    function send(bytes8 payAmt, pubkey payPk, bytes8 changeAmt, pubkey pk, sig s) {

        // verify coin is not frozen
        require(isFrozen != 0x0101);

        // check output format requirements (payment receiver + change address + tax payment receiver + dust tag for notification to payment receiver's p2pkh wallet)
        require(payAmt.length == 8);
        require(payPk.length == 33);
        require(changeAmt.length == 8);
        bytes slpMsg = 0x0000000000000000406a04534c500001010453454e4420 + tokenId + 0x08 + payAmt + 0x08 + changeAmt;
        bytes code = tx.bytecode.split(21)[1];  // get slice after "isFrozen", "slpAmt", and receiver "pkh"
        bytes8 dust = 0x2202000000000000;
        bytes p2shPay = new OutputP2SH(dust, hash160(0x01 + isFrozen + 0x08 + payAmt + 0x14 + hash160(payPk) + code));
        bytes p2shChange = new OutputP2SH(dust, hash160(0x01 + isFrozen + 0x08 + changeAmt + 0x14 + pkh + code));
        bytes payNotifier = new OutputP2PKH(dust, hash160(payPk)); // this dust provides a notification to the payment receiver's standard HD wallet
        require(hash256(slpMsg + p2shPay + p2shChange + payNotifier) == tx.hashOutputs);

        // check p2pkh
        require(hash160(pk) == pkh);
        require(checkSig(s, pk));
    }

    // *************************************************************
    // Freeze/Unfreeze
    // *************************************************************
    //
    // Freeze or unfreeze coin
    //
    //  - newFreezeState: either 0x01 (freeze) or 0x00 (unfreeze)
    //  - issuerSig: CBDC issuer's txn signature
    //
    // *************************************************************
    //
    function freeze(bytes newFreezeState, sig issuerSig) {

        // update byte code to frozen or unfrozen
        if (newFreezeState == 0x01) {
            require(isFrozen == 0x00);
        } else if (newFreezeState == 0x00) {
            require(isFrozen == 0x01);
        }
        bytes bytecode = 0x01 + newFreezeState + tx.bytecode.split(2)[1];
        bytes8 dust = 0x2202000000000000;
        bytes out = new OutputP2SH(dust, hash160(bytecode));
        bytes dustNotification = new OutputP2PKH(dust, pkh);

        // check slp message to prevent burning
        bytes slpMsg = 0x0000000000000000376a04534c500001010453454e4420 + tokenId + 0x08 + slpAmt;
        require(tx.hashOutputs == hash256(slpMsg + out + dustNotification));

        // check issuer's sig
        require(checkSig(issuerSig, issuerPk));
    }
}